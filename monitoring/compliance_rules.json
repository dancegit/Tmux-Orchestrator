{
  "version": "1.0",
  "source": "/home/per/gitrepos/Tmux-Orchestrator/CLAUDE.md",
  "rules": [
    {
      "id": "comm-001",
      "category": "communication",
      "rule": "Developers must report to PM only",
      "violation_patterns": [
        {
          "from": "developer",
          "to": [
            "tester",
            "testrunner",
            "devops",
            "researcher"
          ],
          "direct": true
        }
      ],
      "severity": "high"
    },
    {
      "id": "comm-002",
      "category": "communication",
      "rule": "PM aggregates and reports to Orchestrator",
      "violation_patterns": [
        {
          "from": [
            "developer",
            "tester",
            "testrunner"
          ],
          "to": "orchestrator",
          "direct": true
        }
      ],
      "severity": "high"
    },
    {
      "id": "comm-003",
      "category": "communication",
      "rule": "No chit-chat - all messages work-related",
      "violation_patterns": [
        {
          "keywords": [
            "hi",
            "hello",
            "how are you",
            "thanks",
            "bye"
          ],
          "context": "casual"
        }
      ],
      "severity": "medium"
    },
    {
      "id": "comm-004",
      "category": "communication",
      "rule": "Use message templates for standard communications",
      "violation_patterns": [
        {
          "message_type": "status_update",
          "missing_fields": [
            "completed",
            "current",
            "blocked"
          ]
        }
      ],
      "severity": "low"
    },
    {
      "id": "comm-005",
      "category": "communication",
      "rule": "Always use send-claude-message.sh script",
      "violation_patterns": [
        {
          "command": "tmux send-keys",
          "context": "messaging"
        }
      ],
      "severity": "high"
    },
    {
      "id": "git-001",
      "category": "git",
      "rule": "Never merge to main unless started on main",
      "violation_patterns": [
        {
          "action": "merge",
          "target": "main",
          "parent_not_main": true
        }
      ],
      "severity": "critical"
    },
    {
      "id": "git-002",
      "category": "git",
      "rule": "Auto-commit every 30 minutes",
      "violation_patterns": [
        {
          "time_since_last_commit": ">30min",
          "uncommitted_changes": true
        }
      ],
      "severity": "high"
    },
    {
      "id": "git-003",
      "category": "git",
      "rule": "Always commit before task switches",
      "violation_patterns": [
        {
          "task_switch": true,
          "uncommitted_changes": true
        }
      ],
      "severity": "high"
    },
    {
      "id": "git-004",
      "category": "git",
      "rule": "Create feature branches from current branch",
      "violation_patterns": [
        {
          "branch_creation": true,
          "from_wrong_parent": true
        }
      ],
      "severity": "high"
    },
    {
      "id": "git-005",
      "category": "git",
      "rule": "Use agent-specific branch names",
      "violation_patterns": [
        {
          "branch_name": "missing_role_suffix",
          "agent": true
        }
      ],
      "severity": "medium"
    },
    {
      "id": "sched-001",
      "category": "scheduling",
      "rule": "Orchestrator must test scheduling on startup",
      "violation_patterns": [
        {
          "orchestrator_start": true,
          "schedule_test_missing": true
        }
      ],
      "severity": "critical"
    },
    {
      "id": "sched-002",
      "category": "scheduling",
      "rule": "Schedule script must accept target window parameter",
      "violation_patterns": [
        {
          "schedule_command": true,
          "missing_target": true
        }
      ],
      "severity": "high"
    },
    {
      "id": "sched-003",
      "category": "scheduling",
      "rule": "Regular check-in intervals must be maintained",
      "violation_patterns": [
        {
          "check_in_overdue": true,
          "threshold": "2x_interval"
        }
      ],
      "severity": "medium"
    },
    {
      "id": "int-001",
      "category": "integration",
      "rule": "PM handles all integration and merges",
      "violation_patterns": [
        {
          "integration_by": [
            "developer",
            "tester",
            "testrunner"
          ]
        }
      ],
      "severity": "high"
    },
    {
      "id": "int-002",
      "category": "integration",
      "rule": "Auto-merge PRs with --admin flag",
      "violation_patterns": [
        {
          "pr_merge": true,
          "manual_approval": true
        }
      ],
      "severity": "medium"
    },
    {
      "id": "int-003",
      "category": "integration",
      "rule": "All agents must pull parent branch after integration",
      "violation_patterns": [
        {
          "integration_complete": true,
          "agents_not_synced": true
        }
      ],
      "severity": "high"
    }
  ]
}