# Team Templates and Role Dependencies
# Used by auto_orchestrate.py to configure role relationships

# Default role dependencies that apply to most projects
default_dependencies:
  # PM must know when key tasks complete
  project-manager:
    - devops      # PM needs to know when infrastructure is ready
    - developer   # PM tracks development progress
    - tester      # PM monitors quality status
  
  # Developer dependencies
  developer:
    depends_on:
      - pm: [deployments, merges]  # Needs PM approval for production changes
      - devops: [infrastructure]    # Needs DevOps to have infrastructure ready
  
  # Tester dependencies  
  tester:
    depends_on:
      - developer: [code_complete]  # Needs Developer to finish features
  
  # TestRunner dependencies
  testrunner:
    depends_on:
      - tester: [test_suites]      # Needs Tester to create tests

# Project type specific templates
project_types:
  web_application:
    roles: [orchestrator, project-manager, developer, tester, testrunner]
    dependencies:
      developer:
        depends_on:
          - pm: [deployments, merges, architecture]
          - devops: [infrastructure] # If DevOps present
  
  system_deployment:
    roles: [orchestrator, sysadmin, devops, securityops]
    dependencies:
      devops:
        depends_on:
          - sysadmin: [system_access]
          - securityops: [security_approval]
      sysadmin:
        depends_on:
          - securityops: [security_policies]
      developer:  # If present
        depends_on:
          - devops: [deployment_ready]
          - pm: [deployment_approval]
  
  infrastructure_as_code:
    roles: [orchestrator, devops, sysadmin, securityops]
    dependencies:
      devops:
        depends_on:
          - securityops: [security_review]
      sysadmin:
        depends_on:
          - devops: [infrastructure_code]
  
  data_pipeline:
    roles: [orchestrator, developer, databaseops, devops]
    dependencies:
      developer:
        depends_on:
          - databaseops: [schema_ready]
      devops:
        depends_on:
          - databaseops: [database_ready]

# Authorization scenarios that require explicit approval
authorization_required:
  # Production deployments always need approval
  - action: deploy_to_production
    requires: pm_approval
    timeout_minutes: 30
  
  # Database schema changes need DBA approval
  - action: alter_database_schema
    requires: databaseops_approval
    timeout_minutes: 60
  
  # Security exceptions need SecurityOps
  - action: security_exception
    requires: securityops_approval
    timeout_minutes: 45
  
  # System configuration changes
  - action: system_configuration
    requires: sysadmin_approval
    timeout_minutes: 30