{
  "project": {
    "name": "Elliott Wave 5 + Options Trading MVP - Backtesting Slice Implementation",
    "path": "/home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
    "type": "python",
    "main_tech": [
      "Python",
      "VectorBT",
      "Pandas",
      "NumPy",
      "FastAPI",
      "Modal",
      "Valkey/Redis"
    ]
  },
  "implementation_plan": {
    "phases": [
      {
        "name": "Phase 1: Core Infrastructure and Elliott Wave Integration",
        "duration_hours": 3.0,
        "tasks": [
          "Add Elliott Wave detection simulation method to backtesting_service.py",
          "Implement historical data loading and windowing logic",
          "Create wave pattern analysis with confidence scoring",
          "Set up VectorBT configuration and dependencies"
        ]
      },
      {
        "name": "Phase 2: Options Trading Simulation",
        "duration_hours": 3.5,
        "tasks": [
          "Implement options trade generation from Wave 5 signals",
          "Add Black-Scholes pricing integration for options",
          "Create Greeks calculation functionality",
          "Implement realistic transaction cost modeling"
        ]
      },
      {
        "name": "Phase 3: Backtest Execution Engine",
        "duration_hours": 4.0,
        "tasks": [
          "Build portfolio simulation with position sizing",
          "Implement trade execution with slippage and costs",
          "Create equity curve tracking and P&L calculation",
          "Add memory-efficient chunked processing"
        ]
      },
      {
        "name": "Phase 4: Performance Metrics and Analysis",
        "duration_hours": 2.5,
        "tasks": [
          "Implement comprehensive performance metrics calculation",
          "Add Sharpe, Sortino, and Calmar ratio calculations",
          "Create trade statistics and win rate analysis",
          "Build Elliott Wave and options-specific analytics"
        ]
      },
      {
        "name": "Phase 5: Event Processing and Integration",
        "duration_hours": 2.0,
        "tasks": [
          "Add BacktestRequestEvent processor to plugin_entry.py",
          "Update plugin configuration for MVP features",
          "Implement event publishing for backtest completion",
          "Add error handling and partial result recovery"
        ]
      },
      {
        "name": "Phase 6: Testing and Optimization",
        "duration_hours": 3.0,
        "tasks": [
          "Create comprehensive unit tests for backtesting functionality",
          "Add integration tests for event processing",
          "Implement performance optimization and caching",
          "Test with real historical data scenarios"
        ]
      },
      {
        "name": "Phase 7: Deployment and Documentation",
        "duration_hours": 2.0,
        "tasks": [
          "Update pyproject.toml with new dependencies",
          "Configure Modal deployment settings",
          "Create monitoring and observability setup",
          "Document API changes and usage examples"
        ]
      }
    ],
    "total_estimated_hours": 20.0
  },
  "project_size": {
    "size": "medium",
    "estimated_loc": 2500,
    "complexity": "high"
  },
  "roles": {
    "orchestrator": {
      "responsibilities": [
        "Monitor progress",
        "Coordinate roles",
        "Handle blockers"
      ],
      "check_in_interval": 20,
      "initial_commands": [
        "cd /home/clauderun/Tmux-Orchestrator",
        "python3 claude_control.py status detailed"
      ]
    },
    "project_manager": {
      "responsibilities": [
        "Ensure quality",
        "Track completion",
        "Review coverage"
      ],
      "check_in_interval": 25,
      "initial_commands": [
        "cd /home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
        "cat BACKTESTING_MVP_IMPLEMENTATION.md"
      ]
    },
    "developer": {
      "responsibilities": [
        "Implement features",
        "Write tests",
        "Fix bugs"
      ],
      "check_in_interval": 30,
      "initial_commands": [
        "cd /home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
        "git status"
      ]
    },
    "tester": {
      "responsibilities": [
        "Run tests",
        "Report failures",
        "Verify coverage"
      ],
      "check_in_interval": 30,
      "initial_commands": [
        "cd /home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
        "echo 'Ready to test'"
      ]
    },
    "testrunner": {
      "responsibilities": [
        "Execute test suites",
        "Parallel test management",
        "Performance testing",
        "Test infrastructure",
        "Results analysis"
      ],
      "check_in_interval": 30,
      "initial_commands": [
        "cd /home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
        "echo 'Setting up test execution framework'"
      ]
    },
    "logtracker": {
      "responsibilities": [
        "Monitor logs real-time",
        "Track errors",
        "Alert critical issues",
        "Use project monitoring tools",
        "Generate error reports"
      ],
      "check_in_interval": 15,
      "initial_commands": [
        "cd /home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
        "mkdir -p monitoring/logs monitoring/reports",
        "echo 'Reading CLAUDE.md for monitoring instructions'"
      ]
    },
    "devops": {
      "responsibilities": [
        "Infrastructure setup",
        "Deployment pipelines",
        "Monitor performance"
      ],
      "check_in_interval": 45,
      "initial_commands": [
        "cd /home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
        "echo 'Checking deployment configuration'"
      ]
    },
    "code_reviewer": {
      "responsibilities": [
        "Review code quality",
        "Security audit",
        "Best practices enforcement"
      ],
      "check_in_interval": 40,
      "initial_commands": [
        "cd /home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
        "git log --oneline -10"
      ]
    },
    "researcher": {
      "responsibilities": [
        "MCP tool discovery and utilization",
        "Research best practices",
        "Security vulnerability analysis",
        "Performance optimization research",
        "Document actionable findings"
      ],
      "check_in_interval": 25,
      "initial_commands": [
        "cd /home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
        "mkdir -p research",
        "echo 'Type @ to discover MCP resources, / to discover MCP commands'",
        "echo 'Look for /mcp__ prefixed commands for MCP tools'"
      ]
    },
    "documentation_writer": {
      "responsibilities": [
        "Write technical docs",
        "Update README",
        "Create API documentation"
      ],
      "check_in_interval": 60,
      "initial_commands": [
        "cd /home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
        "ls -la *.md"
      ]
    },
    "sysadmin": {
      "responsibilities": [
        "System setup",
        "User management",
        "Service configuration",
        "Package management",
        "System hardening"
      ],
      "check_in_interval": 30,
      "initial_commands": [
        "cd /home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
        "sudo -n true && echo 'sudo available' || echo 'need sudo password'",
        "uname -a",
        "lsb_release -a 2>/dev/null || cat /etc/os-release"
      ]
    },
    "securityops": {
      "responsibilities": [
        "Security hardening",
        "Firewall configuration",
        "Access control",
        "SSL/TLS setup",
        "Security monitoring"
      ],
      "check_in_interval": 30,
      "initial_commands": [
        "cd /home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
        "sudo iptables -L -n 2>/dev/null || echo 'checking firewall status'",
        "sestatus 2>/dev/null || echo 'SELinux not available'"
      ]
    },
    "networkops": {
      "responsibilities": [
        "Network configuration",
        "Load balancing",
        "Reverse proxy setup",
        "DNS management",
        "Performance optimization"
      ],
      "check_in_interval": 30,
      "initial_commands": [
        "cd /home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
        "ip addr show",
        "netstat -tlnp 2>/dev/null || ss -tlnp"
      ]
    },
    "monitoringops": {
      "responsibilities": [
        "Monitoring stack setup",
        "Metrics collection",
        "Alert configuration",
        "Dashboard creation",
        "Log aggregation"
      ],
      "check_in_interval": 20,
      "initial_commands": [
        "cd /home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
        "mkdir -p monitoring/dashboards monitoring/alerts",
        "echo 'Setting up monitoring infrastructure'"
      ]
    },
    "databaseops": {
      "responsibilities": [
        "Database setup",
        "Performance tuning",
        "Replication",
        "Backup strategies",
        "Schema management"
      ],
      "check_in_interval": 30,
      "initial_commands": [
        "cd /home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
        "echo 'Checking database requirements'",
        "which psql mysql mongod redis-server 2>/dev/null || echo 'No databases installed yet'"
      ]
    }
  },
  "git_workflow": {
    "parent_branch": "main",
    "branch_name": "feature/elliott-wave-options-backtesting-mvp",
    "commit_interval": 30,
    "pr_title": "Implement Elliott Wave 5 + Options Trading Backtesting MVP"
  },
  "success_criteria": [
    "Elliott Wave 5 pattern detection works on historical data with >65% accuracy",
    "Options pricing and Greeks calculation integrated successfully",
    "Backtest completes for 5 years of data across 5 instruments in <30 minutes",
    "All performance metrics (Sharpe, Sortino, max drawdown) calculate correctly",
    "Event processing handles BacktestRequestEvent and publishes completion events",
    "Transaction costs and slippage model realistic trading conditions",
    "Unit tests achieve >80% code coverage for new functionality",
    "Deployment to Modal test environment successful with health checks passing"
  ]
}