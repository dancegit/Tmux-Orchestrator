{
  "project": {
    "name": "Elliott Wave 5 + Options Trading Backtesting MVP",
    "path": "/home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
    "type": "python",
    "main_tech": [
      "Python",
      "VectorBT",
      "FastAPI",
      "Modal",
      "Redis/Valkey",
      "Pandas",
      "NumPy"
    ]
  },
  "implementation_plan": {
    "phases": [
      {
        "name": "Phase 1: Core Infrastructure Setup",
        "duration_hours": 4.0,
        "tasks": [
          "Add VectorBT and required dependencies to pyproject.toml",
          "Create Elliott Wave strategy module structure",
          "Set up options pricing integration imports",
          "Configure VectorBT performance settings",
          "Create base backtesting service methods"
        ]
      },
      {
        "name": "Phase 2: Elliott Wave Detection Implementation",
        "duration_hours": 6.0,
        "tasks": [
          "Implement _simulate_elliott_wave_detection method",
          "Create fractal detection integration",
          "Build wave pattern analysis logic",
          "Implement rolling window simulation",
          "Add confidence scoring and filtering"
        ]
      },
      {
        "name": "Phase 3: Options Trading Logic",
        "duration_hours": 5.0,
        "tasks": [
          "Implement _generate_options_trades method",
          "Integrate Black-Scholes pricing model",
          "Add Greeks calculation functionality",
          "Implement strike price selection logic",
          "Create position sizing algorithms"
        ]
      },
      {
        "name": "Phase 4: Backtest Execution Engine",
        "duration_hours": 6.0,
        "tasks": [
          "Implement _execute_options_backtest method",
          "Add transaction cost modeling",
          "Create portfolio tracking system",
          "Implement trade execution simulation",
          "Build P&L calculation logic"
        ]
      },
      {
        "name": "Phase 5: Performance Metrics & Analysis",
        "duration_hours": 4.0,
        "tasks": [
          "Implement _calculate_performance_metrics method",
          "Add Sharpe/Sortino ratio calculations",
          "Create drawdown analysis functions",
          "Build trade statistics analyzer",
          "Implement options-specific metrics"
        ]
      },
      {
        "name": "Phase 6: Event Processing & Integration",
        "duration_hours": 3.0,
        "tasks": [
          "Update plugin_entry.py with new event processor",
          "Configure BacktestRequestEvent handling",
          "Implement completion event publishing",
          "Update plugin configuration method",
          "Add error handling and recovery"
        ]
      },
      {
        "name": "Phase 7: Testing & Validation",
        "duration_hours": 5.0,
        "tasks": [
          "Create comprehensive unit tests",
          "Implement integration tests",
          "Add performance benchmarks",
          "Test error scenarios and recovery",
          "Validate metrics calculation accuracy"
        ]
      },
      {
        "name": "Phase 8: Optimization & Documentation",
        "duration_hours": 3.0,
        "tasks": [
          "Implement caching strategies",
          "Add memory optimization techniques",
          "Create monitoring and logging",
          "Update API documentation",
          "Finalize deployment configuration"
        ]
      }
    ],
    "total_estimated_hours": 36.0
  },
  "project_size": {
    "size": "medium",
    "estimated_loc": 2500,
    "complexity": "high"
  },
  "roles": {
    "orchestrator": {
      "responsibilities": [
        "Monitor progress",
        "Coordinate roles",
        "Handle blockers"
      ],
      "check_in_interval": 20,
      "initial_commands": [
        "cd /home/clauderun/Tmux-Orchestrator",
        "python3 claude_control.py status detailed"
      ]
    },
    "project_manager": {
      "responsibilities": [
        "Ensure quality",
        "Track completion",
        "Review coverage"
      ],
      "check_in_interval": 25,
      "initial_commands": [
        "cd /home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
        "cat BACKTESTING_MVP_IMPLEMENTATION.md"
      ]
    },
    "developer": {
      "responsibilities": [
        "Implement features",
        "Write tests",
        "Fix bugs"
      ],
      "check_in_interval": 30,
      "initial_commands": [
        "cd /home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
        "git status"
      ]
    },
    "tester": {
      "responsibilities": [
        "Run tests",
        "Report failures",
        "Verify coverage"
      ],
      "check_in_interval": 30,
      "initial_commands": [
        "cd /home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
        "echo 'Ready to test'"
      ]
    },
    "testrunner": {
      "responsibilities": [
        "Execute test suites",
        "Parallel test management",
        "Performance testing",
        "Test infrastructure",
        "Results analysis"
      ],
      "check_in_interval": 30,
      "initial_commands": [
        "cd /home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
        "echo 'Setting up test execution framework'"
      ]
    },
    "logtracker": {
      "responsibilities": [
        "Monitor logs real-time",
        "Track errors",
        "Alert critical issues",
        "Use project monitoring tools",
        "Generate error reports"
      ],
      "check_in_interval": 15,
      "initial_commands": [
        "cd /home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
        "mkdir -p monitoring/logs monitoring/reports",
        "echo 'Reading CLAUDE.md for monitoring instructions'"
      ]
    },
    "devops": {
      "responsibilities": [
        "Infrastructure setup",
        "Deployment pipelines",
        "Monitor performance"
      ],
      "check_in_interval": 45,
      "initial_commands": [
        "cd /home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
        "echo 'Checking deployment configuration'"
      ]
    },
    "code_reviewer": {
      "responsibilities": [
        "Review code quality",
        "Security audit",
        "Best practices enforcement"
      ],
      "check_in_interval": 40,
      "initial_commands": [
        "cd /home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
        "git log --oneline -10"
      ]
    },
    "researcher": {
      "responsibilities": [
        "MCP tool discovery and utilization",
        "Research best practices",
        "Security vulnerability analysis",
        "Performance optimization research",
        "Document actionable findings"
      ],
      "check_in_interval": 25,
      "initial_commands": [
        "cd /home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
        "mkdir -p research",
        "echo 'Type @ to discover MCP resources, / to discover MCP commands'",
        "echo 'Look for /mcp__ prefixed commands for MCP tools'"
      ]
    },
    "documentation_writer": {
      "responsibilities": [
        "Write technical docs",
        "Update README",
        "Create API documentation"
      ],
      "check_in_interval": 60,
      "initial_commands": [
        "cd /home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
        "ls -la *.md"
      ]
    },
    "sysadmin": {
      "responsibilities": [
        "System setup",
        "User management",
        "Service configuration",
        "Package management",
        "System hardening"
      ],
      "check_in_interval": 30,
      "initial_commands": [
        "cd /home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
        "sudo -n true && echo 'sudo available' || echo 'need sudo password'",
        "uname -a",
        "lsb_release -a 2>/dev/null || cat /etc/os-release"
      ]
    },
    "securityops": {
      "responsibilities": [
        "Security hardening",
        "Firewall configuration",
        "Access control",
        "SSL/TLS setup",
        "Security monitoring"
      ],
      "check_in_interval": 30,
      "initial_commands": [
        "cd /home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
        "sudo iptables -L -n 2>/dev/null || echo 'checking firewall status'",
        "sestatus 2>/dev/null || echo 'SELinux not available'"
      ]
    },
    "networkops": {
      "responsibilities": [
        "Network configuration",
        "Load balancing",
        "Reverse proxy setup",
        "DNS management",
        "Performance optimization"
      ],
      "check_in_interval": 30,
      "initial_commands": [
        "cd /home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
        "ip addr show",
        "netstat -tlnp 2>/dev/null || ss -tlnp"
      ]
    },
    "monitoringops": {
      "responsibilities": [
        "Monitoring stack setup",
        "Metrics collection",
        "Alert configuration",
        "Dashboard creation",
        "Log aggregation"
      ],
      "check_in_interval": 20,
      "initial_commands": [
        "cd /home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
        "mkdir -p monitoring/dashboards monitoring/alerts",
        "echo 'Setting up monitoring infrastructure'"
      ]
    },
    "databaseops": {
      "responsibilities": [
        "Database setup",
        "Performance tuning",
        "Replication",
        "Backup strategies",
        "Schema management"
      ],
      "check_in_interval": 30,
      "initial_commands": [
        "cd /home/clauderun/signalmatrix/signalmatrix_org/signalmatrix-slice-backtesting",
        "echo 'Checking database requirements'",
        "which psql mysql mongod redis-server 2>/dev/null || echo 'No databases installed yet'"
      ]
    }
  },
  "git_workflow": {
    "parent_branch": "main",
    "branch_name": "feature/elliott-wave-options-backtesting-mvp",
    "commit_interval": 30,
    "pr_title": "feat: Implement Elliott Wave 5 + Options Trading Backtesting MVP"
  },
  "success_criteria": [
    "Elliott Wave 5 detection backtesting fully functional with configurable thresholds",
    "Options pricing and Greeks calculation integrated with realistic transaction costs",
    "Performance metrics (Sharpe, Sortino, drawdown) calculated accurately",
    "Event processing handles BacktestRequestEvent and publishes completion events",
    "All unit and integration tests passing with >80% code coverage",
    "Backtest execution completes within 30 minutes for 5 years of data across 10 instruments",
    "Memory usage stays under 8GB per backtest execution",
    "Error handling and recovery mechanisms tested and functional"
  ]
}