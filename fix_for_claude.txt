SUMMARY: Tmux Orchestrator Flooding Fix & System Upgrade

  Current Problems:

  1. Orchestrator window is being flooded with "Task completed successfully" messages
  2. Multiple monitoring scripts (workflow_monitor.py, compliance_monitor.py) sending tmux messages
  3. Task counter incrementing rapidly (reached 2600+)
  4. No proper process management or rate limiting
  5. Git workflow using GitHub instead of local remotes

  Root Causes Found:

  - monitoring/workflow_monitor.py and monitoring/compliance_monitor.py sending messages in tight loops
  - credit_management/check_credit_and_resume.sh missing Enter key after messages
  - No central process management
  - No rate limiting on message sending
  - Multiple monitoring processes running simultaneously

  IMMEDIATE FIXES NEEDED:

  1. Stop all flooding processes:
  pkill -f "monitor"
  pkill -f "compliance"
  pkill -f "workflow"
  pkill -f "credit_monitor"
  pkill -f "scheduler"

  2. Fix the immediate flooding source in compliance_monitor.py:
  Find the line that sends tmux messages:
  subprocess.run(['tmux', 'send-keys', '-t', f'{session}:0', orchestrator_msg, 'Enter'])
  Comment it out or replace with logging.

  3. Fix send-claude-message.sh raw mode (missing Enter):
  In the raw mode fallback section, after:
  printf "%s" "$MESSAGE" | tmux send-keys -t "$TARGET" -l
  Add:
  tmux send-keys -t "$TARGET" Enter

  NEW SCRIPTS TO CREATE:

  1. orchestrator_config.yaml - Central configuration controlling all behavior
  2. process_manager.py - Manages all subprocess lifecycles with health monitoring
  3. event_bus.py - Message routing with rate limiting
  4. orchestrator_manager.sh - User-friendly management interface
  5. fix_local_remotes.py - Fixes git to use local remotes instead of GitHub
  6. monitor_git_workflow.py - Monitors git compliance
  7. credit_monitor_v2.py - Redesigned credit monitor using file logging

  KEY CONFIGURATION (orchestrator_config.yaml):

  - Disable tmux messages for all monitoring
  - Set check intervals to 5-10 minutes (not every second!)
  - Enable file logging only
  - Set rate limits (max 10 messages/minute globally)

  FOR THE ORCHESTRATOR:

  Session: elliott-wave-5-options-trading-report-generation-mvp-impl-619fd1c8
  Windows:
  - 0: Orchestrator
  - 1: Project Manager
  - 2: SysAdmin
  - 3: Developer
  - 4: Tester

  Recovery Message to Send:
  ORCHESTRATOR RECOVERY: The monitoring system was flooding your window. All flooding has been stopped. Your duties:
  1. Check each team member's status
  2. Review deployment readiness (was blocked)
  3. Ensure git uses local remotes
  4. Schedule regular check-ins (./schedule_with_note.sh)
  Key commands: ./send-claude-message.sh, ./schedule_with_note.sh, ./monitor_git_workflow.py

  CRITICAL DESIGN PRINCIPLES FOR NEW SYSTEM:

  1. Never use tmux send-keys for status messages
  2. All monitoring writes to log files only
  3. Rate limit all message sending
  4. Single process manager controls everything
  5. Event-driven architecture with message bus
  6. Centralized configuration

  TO IMPLEMENT IN NEW SESSION:

  1. Create all the management scripts
  2. Stop all old monitoring
  3. Fix the git workflow to use local remotes
  4. Start new process manager
  5. Send recovery message to orchestrator
  6. Document the migration

  The flooding is caused by monitoring scripts sending thousands of tmux messages. The solution is to completely redesign the monitoring to use file logging and implement proper rate limiting.
